<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="c:\dev\csgop\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.5\lib\net45\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Microsoft.CodeDom.Providers.DotNetCompilerPlatform" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.CodeDom" #>
<#@ output extension=".cs" #>
using System;
using CSGOP.Unmanaged;
using CSGOP.Core.Data;

#pragma warning disable CS0108 // Member hides inherited member; missing new keyword

namespace CSGOP.Core.Data {
<#
			string[] interfaceCsFileName = {
                @"c:\dev\csgop\Core\DataTemplate.cs",
				@"c:\dev\csgop\Core\Data.cs",
                @"c:\dev\csgop\Functions\CheatFunction.cs",
                @"c:\dev\csgop\Unmanaged\ExternalProcess.cs",
                @"c:\dev\csgop\Unmanaged\Unmanaged.cs",
                @"c:\dev\csgop\Unmanaged\External.cs",
                @"c:\dev\csgop\Imported\Kernel32.cs"
			};
            var files = Directory.GetFiles(@"c:\dev\csgop\Core\Data\");
            var files2 = Directory.GetFiles(@"c:\dev\csgop\Core\Interfaces\");
            var files3 = Directory.GetFiles(@"c:\dev\csgop\Games\");
            string[] combined = interfaceCsFileName.Concat(files).ToArray();
            combined = combined.Concat(files2).ToArray();
            combined = combined.Concat(files3).ToArray();

            CompilerParameters parameters = new CompilerParameters(new string[] { "System.dll", "System.Core.dll"}) {
                GenerateExecutable = false,
                IncludeDebugInformation = false,
                GenerateInMemory = true,
                CompilerOptions = "/unsafe /langversion:7"
            };
            CSharpCodeProvider csProvider = new CSharpCodeProvider();
			var settings = csProvider
                .GetType()
                .GetField("_compilerSettings", BindingFlags.Instance | BindingFlags.NonPublic)
                .GetValue(csProvider);
            var path = settings
                .GetType()
                .GetField("_compilerFullPath", BindingFlags.Instance | BindingFlags.NonPublic);
            path.SetValue(settings, ((string)path.GetValue(settings)).Replace(@"bin\roslyn\", @"\..\..\MSBuild\15.0\Bin\Roslyn\"));

            CompilerResults results = csProvider.CompileAssemblyFromFile(parameters, combined);
            if (results.Errors.HasErrors) {
                foreach (CompilerError error in results.Errors) {
#><#= error.ToString() #>
<#
                }
            }
            Assembly assembly = results.CompiledAssembly;
			foreach (Type type in assembly.GetTypes()) {
				if (type.Namespace == "CSGOP.Core.DataTemplate" && type.Name != "External`1") {
#>

		class <#= type.Name + "<BindingClass> : I" + type.Name #> {
<#
					foreach (FieldInfo fieldInfo in type.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)){
						string typeName = fieldInfo.FieldType.Name;
						string typeNameArraySuffix = "";
						if (typeName.Contains("[]")){
							typeName = typeName.Substring(0, typeName.Length - 2);
							typeNameArraySuffix = "[]";
                        }
						if (typeName[typeName.Length-2] == '`') {
							typeName = typeName.Substring(0, typeName.Length - 2);
							if (typeName == "External") {
								var genericTypeArgument = "";
								var t = fieldInfo.FieldType.GenericTypeArguments[0];
								using (var provider = new CSharpCodeProvider()) {
									var typeRef = new CodeTypeReference(t);
									genericTypeArgument = provider.GetTypeOutput(typeRef);
								}
								typeName += "<" + genericTypeArgument + ", BindingClass>";
							}
                        } else {
							typeName += "<BindingClass>";
                        }
						if (typeName == "Array<BindingClass>") typeName = "External<float, BindingClass>.Array";
#>			protected <#= typeName + typeNameArraySuffix + " " + fieldInfo.Name #>;
<#
					}
					foreach (FieldInfo fieldInfo in type.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)){
						string typeName = fieldInfo.FieldType.Name;
						string valueSuffix = "";
						string typenamePrefix = "";
						string setter = "";
						if (typeName[typeName.Length-2] == '`') {
							typeName = typeName.Substring(0, typeName.Length - 2);
							if (typeName == "External") {
								var t = fieldInfo.FieldType.GenericTypeArguments[0];
								using (var provider = new CSharpCodeProvider()) {
									var typeRef = new CodeTypeReference(t);
									typeName = provider.GetTypeOutput(typeRef);
								}
								valueSuffix = ".Value";
							}
                        } else {
							typenamePrefix = (fieldInfo.FieldType.Namespace == "CSGOP.Core.DataTemplate" ? "I" : "" );
                        }
						if (typenamePrefix == "I" ) setter = "";
						else setter = "set => "  + fieldInfo.Name + valueSuffix + " = value;";
						if (typeName == "Array" ) {
							typeName = "External.IValues<float>";
							valueSuffix = ".ValuesArray";
							setter = "";
                        }
#>			public <#= typenamePrefix + typeName + " " + char.ToUpper(fieldInfo.Name[0]) + fieldInfo.Name.Substring(1) #> {
				get => <#= fieldInfo.Name + valueSuffix #>;
				<#= setter #>
			}
<#
					}
#>
		}
		interface <#= "I" + type.Name #><#
#><#= (type.GetInterfaces().Length > 0 ? " : " + type.GetInterfaces()[0] : "") #><#
					for (var i = 1; i < type.GetInterfaces().Length ; ++i) { // type.GetInterfaces().Length
#><#= ", " + type.GetInterfaces()[i].Name #><#
					}
#> {
<#
					foreach (FieldInfo fieldInfo in type.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)){
						string typeName = fieldInfo.FieldType.Name;
						string typenamePrefix = "";
						string setter = "";
						string typeNameArraySuffix = "";
						if (typeName.Contains("[]")){
							typeName = typeName.Substring(0, typeName.Length - 2);
							typeNameArraySuffix = "[]";
                        }
						if (typeName[typeName.Length-2] == '`') {
							typeName = typeName.Substring(0, typeName.Length - 2);
							if (typeName == "External") {
								var t = fieldInfo.FieldType.GenericTypeArguments[0];
								using (var provider = new CSharpCodeProvider()) {
									var typeRef = new CodeTypeReference(t);
									typeName = provider.GetTypeOutput(typeRef);
								}
							}
                        } else {
							typenamePrefix = (fieldInfo.FieldType.Namespace == "CSGOP.Core.DataTemplate" ? "I" : "" );
                        }
						if (typenamePrefix == "I" ) setter = "";
						else setter = "set;";
						if (typeName == "Array" ) {
							typeName = "External.IValues<float>";
							setter = "";
                        }
#>			<#= typenamePrefix + typeName + typeNameArraySuffix + " " + char.ToUpper(fieldInfo.Name[0]) + fieldInfo.Name.Substring(1) #> {
				get;
				<#= setter #>
			}
<#
					}
#>
		}
<#
                }
			}
#>
	class External<T> : External<T, object> where T : struct {
        public External(int address) : base(address) {
        }

        public External(string module, int offset) : base(module, offset) {
        }

        public External(Func<IntPtr> GetBaseAddress, int offset) : base(GetBaseAddress, offset) {
        }

        public External(External<IntPtr, object> parentObject, int offset) : base(parentObject, offset) {
        }
    }
}

